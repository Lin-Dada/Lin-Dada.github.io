I"F<blockquote>
  <p>最近一门课要求做大作业，题目是一个文件安全传输系统，涉及到的知识点有socket、ssl证书申请、使用ssl证书加密通信、GUI、多线程等，还是蛮多内容的。我花了三四天做了个简单的Demo，中间遇到了许多问题，但最后还是一一解决了。后面我会将完整代码放到我的github上，本文记录了核心功能的实现思路。</p>
</blockquote>

<h3 id="效果展示">效果展示</h3>
<h4 id="登录界面">登录界面</h4>

<p>可选择使用/不使用ssl加密
<img src="/img/in-post/transfer/login.png" alt="login" title="login" width="400" /></p>

<h4 id="下载界面">下载界面</h4>
<p><img src="/img/in-post/transfer/list.png" alt="download" title="download" /></p>

<h4 id="上传界面">上传界面</h4>
<p><img src="/img/in-post/transfer/upload.png" alt="upload" title="upload" /></p>

<h4 id="wireshark抓包--不加密">wireshark抓包 – 不加密</h4>

<p>过滤条件： <code class="highlighter-rouge">ip.addr == 127.0.0.1 and tcp.port == 9999</code>
<img src="/img/in-post/transfer/tcp.png" alt="tcp" title="tcp" />
都是TCP流量，可以看到明文传输的自定义header头中的用户名和密码，再往下翻，数据传输的过程也是明文的，非常不安全</p>

<h4 id="wireshark抓包--ssl加密">wireshark抓包 – SSL加密</h4>

<p>过滤条件： <code class="highlighter-rouge">ip.addr == 127.0.0.1 and tcp.port == 9999</code>
TCP三次握手之后就是TLS协议的包了，可以看到内容是加密的，看不出内容。（一个TLS发出后有个对方反馈的TCP确认包，可靠有链接的TCP，你懂的）
<img src="/img/in-post/transfer/tls.png" alt="tls" title="tls" /></p>

<h3 id="非对称加密原理">非对称加密原理</h3>

<p>非对称加密主要是利用一个数学难题来实现的，即验证简单，求解困难，比如大质数分解。当然实际的问题要复杂得多，常用的加密算法有RSA、AES等。我觉得助教刘鹏兄弟对非对称加密体系解释得非常好，这里借用一下。</p>

<p>对称密码的加密密钥和解密密钥完全相同，非对称密码则不然：</p>
<ol>
  <li>用私钥生成成公钥</li>
  <li>私钥加密后，只能用公钥解密 (当然，私钥自己也是能解密的，私钥可以先生成公钥，再来解密密文)</li>
  <li>公钥加密后，只能用私钥解密 (意思是说，公钥加密后，公钥自己也无法解密了)</li>
</ol>

<p>但是，在实际应⽤中，公钥密码体系还不安全。因为有可能被中间人攻击。假如A、B 想通过公共信道进行交互</p>
<ul>
  <li>假设 A 与 B 要进行安全通信，则两者交换公钥，然后用对方的公钥加密发出的消
息，然后用自己的私钥解密收到的密⽂。然而，两者如何安全交换公钥这个问题就
不好解决。如果有不怀好意的 C，在 A B 中间，给 A 和 B 自己的公钥，这时候
他将能截获 A B 的所有消息，然后用自己的私钥解密，而 A/B 还会以为与自己通
信的是 B/A。这就是中间人攻击。</li>
  <li>如何避免中间人攻击呢？假设有个大佬 O，全世界的人都很相信他，人们普遍认
为 O 是个绝对正直的人，凡是被 O 相信的人，值得天下人相信，凡是不被 O 相
信的人，一律不值得相信。O 的公钥天下人都有，这个公钥人人都能倒背如流。</li>
  <li>这时候，A 可以请求大佬 O 鉴定⼀下 A 自身的⼈品，如果⼈品足够好，就让 O
用自己的私钥给 A 的公钥加⼀下密。这就有意思了！以后 A 想要和 B 打交道，
就说：把我被大佬 O 加过密的公钥拿去吧，这可是大佬 O 私钥加密过的，你用大
佬的公钥解密后得到我的公钥了(准则2)。B 老老实实地按照 A 说的，用 O 的公
钥对这个加过密的公钥解密，得到了或许正确的 A 的公钥。</li>
  <li>这之后 A 发过一段用自己的私钥加密过的密文，B 用刚才解出来的公钥一解密，
发现正是一段广为人知的明文，这时候，B 就完全信任
A 了。</li>
</ul>

<p>总结一下，客户端验证服务器发来的证书步骤如下（以浏览器为例）：</p>
<ol>
  <li>首先浏览器读取证书中的证书所有者、有效期等信息进行一一校验</li>
  <li>浏览器开始查找操作系统中已内置的受信任的证书发布机构CA，与服务器发来的证书中的颁发者CA比对，用于校验证书是否为合法机构颁发</li>
  <li>如果找不到，浏览器就会报错，说明服务器发来的证书是不可信任的。</li>
  <li>如果找到，那么浏览器就会从操作系统中取出 颁发者CA 的公钥，然后对服务器发来的证书里面的签名进行解密</li>
  <li>浏览器使用相同的hash算法计算出服务器发来的证书的hash值，将这个计算的hash值与证书中签名做对比</li>
  <li>对比结果一致，则证明服务器发来的证书合法，没有被冒充</li>
  <li>此时浏览器就可以读取证书中的公钥，用于后续加密了</li>
</ol>

<h3 id="openssl申请证书">OpenSSL申请证书</h3>
<p>注意三点</p>
<ul>
  <li>
    <p>第一点，注意将其中的私钥加密密码（-passout参数）修改成自己的密码；下边都是以带-passout参数生成私钥，如果使用-nodes参数，则最后一步“将加密的RSA密钥转成未加密的RSA密钥”不需要执行。</p>
  </li>
  <li>
    <p>第二点，证书和密钥给出了直接一步生成和分步生成两种形式，两种形式是等价的，这里使用直接生成形式（分步生成形式被注释）</p>
  </li>
  <li>
    <p>第三点，注意将其中的证书信息改成自己的组织信息的。其中证数各参数含义如下：</p>
  </li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>C-----国家（Country Name）

ST----省份（State or Province Name）

L----城市（Locality Name）

O----公司（Organization Name）

OU----部门（Organizational Unit Name）

CN----产品名（Common Name）

emailAddress----邮箱（Email Address）
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre># CA证书及密钥生成方法一----直接生成CA密钥及其自签名证书
openssl req -newkey rsa:2048 -nodes -keyout ca_rsa_private.pem -x509 -days 365 -out ca.crt -subj "/C=CN/ST=GD/L=SZ/O=COM/OU=NSP/CN=CA/emailAddress=173213354@qq.com"

# 服务器证书及密钥生成方法一----直接生成服务器密钥及待签名证书
openssl req -newkey rsa:2048 -nodes -keyout server_rsa_private.pem  -out server.csr -subj "/C=CN/ST=GD/L=SZ/O=COM/OU=NSP/CN=SERVER/emailAddress=173213354@qq.com"

# 使用CA证书及密钥对服务器证书进行签名：
openssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca_rsa_private.pem -CAcreateserial -out server.crt

# 客户端证书及密钥生成方法一----直接生成客户端密钥及待签名证书
openssl req -newkey rsa:2048 -nodes -keyout client_rsa_private.pem -out client.csr -subj "/C=CN/ST=GD/L=SZ/O=COM/OU=NSP/CN=CLIENT/emailAddress=173213354@qq.com"

# 使用CA证书及密钥对客户端证书进行签名：
openssl x509 -req -days 365 -in client.csr -CA ca.crt -CAkey ca_rsa_private.pem -CAcreateserial -out client.crt
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="python中实现双向验证">Python中实现双向验证</h3>

<p>我找了好久网上的资料，绝大部分代码都只实现了单向验证，即只验证服务器的证书，而不验证客户端的证书。查了好久资料，终于发现双向验证的方法，一行代码的事，即打开双向校验模式。</p>

<h4 id="服务器端核心代码">服务器端：（核心代码）</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">import</span> <span class="nn">ssl</span><span class="p">,</span> <span class="n">threading</span><span class="p">,</span> <span class="n">struct</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">pymysql</span>

<span class="k">class</span> <span class="nc">server_ssl</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">server_listen</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c1"># 生成SSL上下文
</span>        <span class="n">context</span> <span class="o">=</span> <span class="n">ssl</span><span class="o">.</span><span class="n">SSLContext</span><span class="p">(</span><span class="n">ssl</span><span class="o">.</span><span class="n">PROTOCOL_TLS_SERVER</span><span class="p">)</span>
        <span class="c1"># 加载信任根证书
</span>        <span class="n">context</span><span class="o">.</span><span class="n">load_verify_locations</span><span class="p">(</span><span class="s">'./cer/CA/ca.crt'</span><span class="p">)</span>
        <span class="c1"># 加载服务器所用证书和私钥
</span>        <span class="n">context</span><span class="o">.</span><span class="n">load_cert_chain</span><span class="p">(</span><span class="s">'./cer/server/server.crt'</span><span class="p">,</span> <span class="s">'./cer/server/server_rsa_private.pem'</span><span class="p">)</span>
        <span class="c1"># 双向校验模式
</span>        <span class="n">context</span><span class="o">.</span><span class="n">verify_mode</span> <span class="o">=</span> <span class="n">ssl</span><span class="o">.</span><span class="n">CERT_REQUIRED</span>

        <span class="c1"># 监听端口
</span>        <span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">as</span> <span class="n">sock</span><span class="p">:</span>
            <span class="n">sock</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">'127.0.0.1'</span><span class="p">,</span> <span class="mi">9999</span><span class="p">))</span>
            <span class="n">sock</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
            <span class="c1"># 将socket打包成SSL socket
</span>            <span class="k">with</span> <span class="n">context</span><span class="o">.</span><span class="n">wrap_socket</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="n">server_side</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="k">as</span> <span class="n">ssock</span><span class="p">:</span>
                <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                    <span class="c1"># 接收客户端连接
</span>                    <span class="n">connection</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">ssock</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
                    <span class="k">print</span><span class="p">(</span><span class="s">'Connected by '</span><span class="p">,</span> <span class="n">addr</span><span class="p">)</span>
                    <span class="c1">#开启多线程,这里arg后面一定要跟逗号，否则报错
</span>                    <span class="n">thread</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">conn_thread</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">connection</span><span class="p">,))</span>
                    <span class="n">thread</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">conn_thread</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">connection</span><span class="p">):</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="c1">#这里写你的服务器逻辑
</span>                <span class="o">...</span>
                <span class="o">...</span>
                
            <span class="k">except</span> <span class="n">socket</span><span class="o">.</span><span class="n">timeout</span><span class="p">:</span>
                <span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
                <span class="k">break</span>
            <span class="k">except</span> <span class="nb">ConnectionResetError</span><span class="p">:</span>
                <span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
                <span class="k">break</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="客户端核心代码">客户端（核心代码）：</h4>

<p>客户端还要实现图像界面，这里使用python的tkinter库实现，GUI的细节就不多讲了,socket代码如下：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">import</span> <span class="nn">ssl</span><span class="p">,</span><span class="n">time</span><span class="p">,</span><span class="n">os</span><span class="p">,</span><span class="n">struct</span><span class="p">,</span><span class="n">json</span><span class="p">,</span><span class="n">tkinter</span>

<span class="k">class</span> <span class="nc">client_ssl</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c1"># 生成SSL上下文
</span>        <span class="n">context</span> <span class="o">=</span> <span class="n">ssl</span><span class="o">.</span><span class="n">SSLContext</span><span class="p">(</span><span class="n">ssl</span><span class="o">.</span><span class="n">PROTOCOL_TLS_CLIENT</span><span class="p">)</span>
        <span class="c1"># 加载信任根证书
</span>        <span class="n">context</span><span class="o">.</span><span class="n">load_verify_locations</span><span class="p">(</span><span class="s">'./cer/CA/ca.crt'</span><span class="p">)</span>
        <span class="c1"># 加载客户端所用证书和私钥
</span>        <span class="n">context</span><span class="o">.</span><span class="n">load_cert_chain</span><span class="p">(</span><span class="s">'./cer/client/client.crt'</span><span class="p">,</span> <span class="s">'./cer/client/client_rsa_private.pem'</span><span class="p">)</span>
        <span class="c1"># 双向校验模式
</span>        <span class="n">context</span><span class="o">.</span><span class="n">verify_mode</span> <span class="o">=</span> <span class="n">ssl</span><span class="o">.</span><span class="n">CERT_REQUIRED</span>

        <span class="c1"># 与服务端建立socket连接
</span>        <span class="bp">self</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">create_connection</span><span class="p">((</span><span class="s">'127.0.0.1'</span><span class="p">,</span> <span class="mi">9999</span><span class="p">))</span>

        <span class="c1"># 将socket打包成SSL socket
</span>        <span class="c1"># 一定要注意的是这里的server_hostname是指服务端证书中设置的CN
</span>        <span class="bp">self</span><span class="o">.</span><span class="n">ssock</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">wrap_socket</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">sock</span><span class="p">,</span> <span class="n">server_hostname</span><span class="o">=</span><span class="s">'SERVER'</span><span class="p">,</span> <span class="n">server_side</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        
    <span class="c1">#下面开始定义你自己的客户端逻辑函数
</span>    <span class="k">def</span> <span class="err">...
</span></pre></td></tr></tbody></table></code></pre></div></div>

:ET